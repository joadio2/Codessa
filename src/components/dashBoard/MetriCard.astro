---
export interface Props {
  title: string;
  value: string | number;
  change: number;
  icon: string;
  color: 'blue' | 'green' | 'orange' | 'purple';
  trend?: 'up' | 'down';
}

const { title, value, change, icon, color, trend = 'up' } = Astro.props;

const colorClasses = {
  blue: 'metric-card--blue',
  green: 'metric-card--green',
  orange: 'metric-card--orange',
  purple: 'metric-card--purple'
};
---

<div class={`metric-card ${colorClasses[color]}`}>
  <div class="metric-card__header">
    <div class="metric-card__icon">
      {icon === 'revenue' && (
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z"/>
        </svg>
      )}
      {icon === 'users' && (
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
          <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
        </svg>
      )}
      {icon === 'orders' && (
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
          <path d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 5H2M7 13v4a2 2 0 002 2h8a2 2 0 002-2v-4M7 13l-2-10M7 13h10M9 19a1 1 0 102 0 1 1 0 00-2 0zM20 19a1 1 0 11-2 0 1 1 0 012 0z"/>
        </svg>
      )}
      {icon === 'conversion' && (
        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
          <path d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
        </svg>
      )}
    </div>
    <div class={`metric-card__trend ${trend === 'up' ? 'positive' : 'negative'}`}>
      <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        {trend === 'up' ? (
          <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
        ) : (
          <path d="m7.247 11.14 4.796-5.481c.566-.647.106-1.659-.753-1.659H2.698a1 1 0 0 0-.753 1.659l4.796 5.48a1 1 0 0 0 1.506 0z"/>
        )}
      </svg>
      <span>{Math.abs(change)}%</span>
    </div>
  </div>
  
  <div class="metric-card__body">
    <h3 class="metric-card__title">{title}</h3>
    <div class="metric-card__value">{value}</div>
    <p class="metric-card__description">
      {trend === 'up' ? 'Increase' : 'Decrease'} from last month
    </p>
  </div>
  
  <div class="metric-card__footer">
    <div class="metric-card__chart">
      <svg width="100%" height="32" viewBox="0 0 200 32">
        <defs>
          <linearGradient id={`chart-${color}`} x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" stop-color="currentColor" stop-opacity="0.3"/>
            <stop offset="100%" stop-color="currentColor" stop-opacity="0"/>
          </linearGradient>
        </defs>
        <path 
          d="M0,24 Q20,16 40,20 T80,12 T120,16 T160,8 T200,14" 
          stroke="currentColor" 
          stroke-width="2" 
          fill="none"
        />
        <path 
          d="M0,24 Q20,16 40,20 T80,12 T120,16 T160,8 T200,14 L200,32 L0,32 Z" 
          fill={`url(#chart-${color})`}
        />
      </svg>
    </div>
  </div>
</div>

<style>
  .metric-card {
    background: white;
    border-radius: 16px;
    padding: 24px;
    border: 1px solid #f1f5f9;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  
  .metric-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--card-gradient-start), var(--card-gradient-end));
    transition: height 0.3s ease;
  }
  
  .metric-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    border-color: var(--card-border-hover);
  }
  
  .metric-card:hover::before {
    height: 6px;
  }
  
  .metric-card--blue {
    --card-gradient-start: #3b82f6;
    --card-gradient-end: #1d4ed8;
    --card-border-hover: #3b82f6;
    --card-color: #3b82f6;
  }
  
  .metric-card--green {
    --card-gradient-start: #10b981;
    --card-gradient-end: #059669;
    --card-border-hover: #10b981;
    --card-color: #10b981;
  }
  
  .metric-card--orange {
    --card-gradient-start: #f59e0b;
    --card-gradient-end: #d97706;
    --card-border-hover: #f59e0b;
    --card-color: #f59e0b;
  }
  
  .metric-card--purple {
    --card-gradient-start: #8b5cf6;
    --card-gradient-end: #7c3aed;
    --card-border-hover: #8b5cf6;
    --card-color: #8b5cf6;
  }
  
  .metric-card__header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    margin-bottom: 16px;
  }
  
  .metric-card__icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--card-gradient-start), var(--card-gradient-end));
    color: white;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
  }
  
  .metric-card__trend {
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 4px 8px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
  }
  
  .metric-card__trend.positive {
    background: #dcfce7;
    color: #166534;
  }
  
  .metric-card__trend.negative {
    background: #fee2e2;
    color: #991b1b;
  }
  
  .metric-card__body {
    margin-bottom: 20px;
  }
  
  .metric-card__title {
    font-size: 14px;
    font-weight: 500;
    color: #64748b;
    margin: 0 0 8px 0;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .metric-card__value {
    font-size: 32px;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 4px;
    line-height: 1;
  }
  
  .metric-card__description {
    font-size: 13px;
    color: #64748b;
    margin: 0;
  }
  
  .metric-card__footer {
    margin-top: auto;
  }
  
  .metric-card__chart {
    height: 32px;
    color: var(--card-color);
    opacity: 0.8;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .metric-card {
    animation: fadeInUp 0.6s ease-out;
  }
  
  .metric-card:nth-child(2) {
    animation-delay: 0.1s;
  }
  
  .metric-card:nth-child(3) {
    animation-delay: 0.2s;
  }
  
  .metric-card:nth-child(4) {
    animation-delay: 0.3s;
  }
</style>